#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use Term::ANSIColor;


$| = 1;

sub info {
	print STDERR shift;
}

sub info_ok {
	print STDERR color('bold green');
	print STDERR shift;
	print STDERR color('reset');
}

sub warning {
	print STDERR color('bold red');
	print STDERR shift;
	print STDERR color('reset');
}

sub important {
	print STDERR color('bold white');
	print STDERR shift;
	print STDERR color('reset');
}


sub fatal {
	print STDERR color('bold red');
	print STDERR shift;
	print STDERR "\n\nPlease notify Dale Glass#8576 on Discord of this problem.\n";
	print STDERR color('reset');
	exit 1;
}


my $data = {
	'ubuntu-16.04' => {
		has_binary_qt_package => 1,
		source_dependencies => [
			'libterm-readline-gnu-perl',
			'build-essential',
			'git',
			'make',
			'cmake',
			'python',
			'libdrm-dev',
			'mesa-common-dev',
			'mesa-utils',
			'libglvnd-dev',
			'libgl1-mesa-dev',
			'xdg-user-dirs',
			# Qt runtime
			'libdouble-conversion1', 'libxcb-xinerama0-dev',
			# Interface
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Misc
			'libasound2', 'libxmu-dev', 'libxi-dev', 'freeglut3-dev', 'libasound2-dev', 'libjack0', 'libjack-dev', 'libxrandr-dev', 'libudev-dev', 'libssl-dev', 'zlib1g-dev',
			# Server
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Docs
			'nodejs'
		]

	},
	'ubuntu-18.04' => {
		has_binary_qt_package => 1,
		source_dependencies => [
			'libterm-readline-gnu-perl',
			'build-essential',
			'git',
			'make',
			'cmake',
			'python',
			'libdrm-dev',
			'mesa-common-dev',
			'mesa-utils',
			'libglvnd-dev',
			'libgl1-mesa-dev',
			'xdg-user-dirs',
			# Qt runtime
			'libdouble-conversion1', 'libxcb-xinerama0-dev',
			# Interface
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Misc
			'libasound2', 'libxmu-dev', 'libxi-dev', 'freeglut3-dev', 'libasound2-dev', 'libjack0', 'libjack-dev', 'libxrandr-dev', 'libudev-dev', 'libssl-dev', 'zlib1g-dev',
			# Server
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Docs
			'nodejs'
		]

	},
	'ubuntu-19.10' => {
		has_binary_qt_package => 1,
		source_dependencies => [
			'libterm-readline-gnu-perl',
			'build-essential',
			'git',
			'make',
			'cmake',
			'python',
			'libdrm-dev',
			'mesa-common-dev',
			'mesa-utils',
			'libglvnd-dev',
			'libgl1-mesa-dev',
			'xdg-user-dirs',
			# Qt
			'libdouble-conversion-dev', 'libxcb-xinerama0-dev', 'libpcre2-16-0', 'libxcb-xinput0',
			# Interface
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Misc
			'libasound2', 'libxmu-dev', 'libxi-dev', 'freeglut3-dev', 'libasound2-dev', 'libjack0', 'libjack-dev', 'libxrandr-dev', 'libudev-dev', 'libssl-dev', 'zlib1g-dev',
			# Server
			'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
			# Docs
			'nodejs'
		]
	},

	'fedora-31' => {
		has_binary_qt_package => 0,
		qt_version => '5.12.6',
		qt_patches => [
			'aec.patch',
			'mac-web-video.patch',
#			'qfloat16.patch',  # Doesn't apply against 5.12.6
			'qtscript-crash-fix.patch'
		],
		source_dependencies => [
			'git',
			'perl-Term-ReadLine-Gnu',
			'cmake',
			'make',
			'gcc-c++',
			'libatomic'
		],
		qt_source_dependencies => [
			"patch",
			"alsa-lib-devel",
			"cups-devel",
			"firebird-devel",
			"freetds-devel",
			"glib2-devel",
			"gtk3-devel",
			"libdrm-devel",
			"libinput-devel",
			"libjpeg-turbo-devel",
			"libpq-devel",
			"libtiff-devel",
			"libxkbcommon-devel",
			"libxkbcommon-x11-devel",
			"mariadb-connector-c-devel",
			"mesa-libEGL-devel",
			"mesa-libGL-devel",
			"mesa-libgbm-devel",
			"pcre2-devel",
			"sqlite-devel",
			"systemd-devel",
			"xkeyboard-config-devel",
			"zlib-devel",
			"at-spi2-core-devel",
			"dbus-devel",
			"fontconfig-devel",
			"harfbuzz-devel",
			"libICE-devel",
			"libSM-devel",
			"libicu-devel",
			"libmng-devel",
			"libpng-devel",
			"libproxy-devel",
			"libxcb-devel",
			"openssl-devel",
			"pcre-devel",
			"perl-generators",
			"pulseaudio-libs-devel",
			"qt5-rpm-macros",
			"unixODBC-devel",
			"xcb-util-image-devel",
			"xcb-util-keysyms-devel",
			"xcb-util-renderutil-devel",
			"xcb-util-wm-devel",
			"libxcb-devel",
			"python2",
			"gperf",
			"bison",
			"flex",
			"nss-devel",
			"libstdc++-static",
			# Possibly unnecessary, optional dependencies of
			# WebEngine. Should check what's useful and what not.
			"jsoncpp-devel",
			"libxslt-devel",
			"libvpx-devel",
			"libicu-devel",
			"re2-devel",
			"libxml2-devel",
			"opus-devel",
			"libicu-devel",
			"libwebp-devel"
		]
	}
};

my @x11_lib_paths = ("/usr/lib64", "/usr/X11R6/lib64", "/usr/lib/x86_64-linux-gnu", "/usr/lib");

my $repo         = "https://github.com/kasenvr/project-athena";
my $qt_repo      = "git://code.qt.io/qt/qt5.git";
my $repo_tag     = "kasen/core";
my $inst_dir     = "$ENV{HOME}/Athena";
my $build_cores  = calculate_cores();
my $desktop      = get_desktop();

my ($opt_keep_source, $opt_auto);
my ($cmd_help);

GetOptions(
	"keep-source|K"          => \$opt_keep_source,
	"help|h"                 => \$cmd_help,
	"auto|y"                 => \$opt_auto,
	"repo|r=s"               => \$repo,
	"tag|t=s"                => \$repo_tag,
        "destdir|d=s"            => \$inst_dir,
        "cores|j=i"              => \$build_cores
) or help(1);

help(1) if ($cmd_help);






my ($DISTRO, $DISTRO_VER) = detect_distro();

if ( !exists $data->{"${DISTRO}-${DISTRO_VER}"} ) {
	fatal("No configuration for $DISTRO $DISTRO_VER, distribution unsupported.");
}

my $DD = $data->{"${DISTRO}-${DISTRO_VER}"};



my %PACKAGES = get_package_list();
install_missing_packages();
collect_info();

get_source();
install_qt() unless($DD->{has_binary_qt_package});
install();
setup_desktop();




sub detect_distro {
	info("Detecting distribution... ");

	if ( -f "/etc/fedora-release" ) {
		my ($release_line) = readfile("/etc/fedora-release");
		my ($ver) = $release_line =~ /^Fedora release (\d+)/;

		info_ok("Fedora $ver\n");
		return ("fedora", $ver);
	}

	if ( -f "/etc/lsb-release" ) {
		my @lsb = readfile("/etc/lsb-release");
		my ($dist) = grep { /^DISTRIB_ID/ } @lsb;
		my ($ver)  = grep { /^DISTRIB_RELEASE/ } @lsb;

		my ($distro_name, $release);
		(undef, $distro_name) = split(/=/, $dist);
		(undef, $release)     = split(/=/, $ver);

		info_ok("$distro_name $release\n");
		return (lc($distro_name), $release);
	}

	fatal("Failed to detect distribution!");
}



sub get_package_list {
	info("Getting the package list... ");
	my @packages;
	if ( $DISTRO eq "fedora" ) {
		@packages = `rpm -qa --qf "%{NAME}\\n"`
	} elsif ( $DISTRO eq "ubuntu" ) {
		@packages = `dpkg-query --show -f "\\\${Package}\n"`
	}

	chomp @packages;

	info_ok("done.\n");
	return map { $_ => 1 } @packages;
}

sub install_missing_packages {
	my @required_packages = @{$DD->{source_dependencies}};

	info("Checking Qt availability...");


	if ( !$DD->{has_binary_qt_package} ) {
		warning("There is no binary Qt package available for your system!\n\n");
		warning("This script can build it for you, but it can take a long time,\n");
		warning("up to several hours, depending on hardware capabilities.\n\n");
		warning("Fortunately, it only needs to be built once.\n\n");

		push @required_packages, @{ $DD->{qt_source_dependencies} }
	} else {
		info_ok(" yes\n");
	}




	info("Checking if any packages need installing... ");


	my @missing = grep { !exists $PACKAGES{$_} } @required_packages;


	if ( @missing ) {
		print scalar(@missing) . " additional packages needed: " . join(", ", @missing) . "\n";

		if ( $DISTRO eq "fedora" ) {
			sudo_run("dnf", "install", "-y", @missing);
		} elsif ( $DISTRO eq "ubuntu" ) {
			sudo_run("apt-get", "install", "-y", @missing);
		}

		info_ok("\nPackages have been installed, please run $0 again.\n\n");
		exit(0);
	} else {
		info_ok("no.\n");
	}
}

sub collect_info {
	require Term::ReadLine;
	info("\n");
	important("Everything seems to be in order. I am going to ask you some questions now.\n");
	important("The defaults should be just fine. Simply press ENTER to accept the suggested\n");
	important("value.\n\n");

	my $rl = Term::ReadLine->new('athena_setup');
	my $ok = $opt_auto ? "yes" : "no";

	while($ok ne "yes") {
		$repo         = $rl->readline("Git repository  : ", $repo);
		$repo_tag     = $rl->readline("Git tag         : ", $repo_tag);
		$inst_dir     = $rl->readline("Installation dir: ", $inst_dir);
		$build_cores  = $rl->readline("CPU cores to use: ", $build_cores);
		info("\n");
		$ok = $rl->readline("If the above is okay, say 'yes' to begin installation: ", "yes");
	}


}


sub get_source {
	info("\n\n");
	important("############################################################\n");
	important("# Starting installation\n");
	important("############################################################\n");
	info("\n");

	mkdir($inst_dir);
	
	clone_repo($repo, "source", $repo_tag);
}

sub install {
	info("\n\n");
	important("############################################################\n");
	important("# Building\n");
	important("############################################################\n");
	info("\n");


	if ( check_qt_install() ) {
		important("Using compiled Qt\n");
		$ENV{QT_CMAKE_PREFIX_PATH}="$inst_dir/qt5-install/lib/cmake";
	}	


	$ENV{HIFI_VCPKG_BASE} = "$inst_dir/vcpkg";

	if ( -d "$inst_dir/build" ) {
		run("rm", "-rf", "$inst_dir/build");
	}

	mkdir("$inst_dir/build");
	chdir("$inst_dir/build");

	run("cmake", "../source");
	run("make", "interface", "-j${build_cores}");
	

}


sub install_qt {

	if ( check_qt_install() ) {
		important("Skipping Qt5 build. You can remove $inst_dir/qt5-install if you want to force it to be rebuilt.\n");
		return;
	}


	info("\n\n");
	important("############################################################\n");
	important("# Starting Qt build\n");
	important("############################################################\n");
	info("\n");


	mkdir($inst_dir);
	chdir($inst_dir);
#	run("git", "clone", "--recursive", $qt_repo
	clone_repo($qt_repo, "qt5",  $DD->{qt_version});


	info("Applying patches...\n");
	chdir("$inst_dir/qt5");

	foreach my $patch ( @{ $DD->{qt_patches} } ) {
		run("patch", "-p1", "-i", "$inst_dir/source/tools/qt-builder/patches/$patch");
	}

	info("Configuring paths...\n");
	my $xlib_path  = find_lib_dir('libX11.so', @x11_lib_paths);
	my $gllib_path = find_lib_dir('libGL.so', @x11_lib_paths);

	edit_qt_conf(
		"$inst_dir/qt5/qtbase/mkspecs/linux-g++-64/qmake.conf",
		QMAKE_LIBDIR_X11    => $xlib_path,
		QMAKE_LIBDIR_OPENGL => $gllib_path
	);
		


	del_dir("$inst_dir/qt5-install");
	del_dir("$inst_dir/qt5-build");

	mkdir("$inst_dir/qt5-install");
	mkdir("$inst_dir/qt5-build");

	chdir("$inst_dir/qt5-build");
	run("../qt5/configure", "-opensource", "-confirm-license", 
		"-platform", "linux-g++-64",
		"-nomake", "examples",
		"-nomake", "tests",
		"-skip", "qttranslations",
		"-skip", "qtserialport",
		"-skip", "qt3d",
		"-skip", "qtlocation",
		"-skip", "qtwayland",
		"-skip", "qtsensors",
		"-skip", "qtgamepad",
		"-skip", "qtspeech",
		"-skip", "qtcharts",
		"-skip", "qtmacextras",
		"-skip", "qtvirtualkeyboard",
		"-skip", "qtpurchasing",
		"-skip", "qtdatavis3d",
		"-no-warnings-are-errors", "-no-pch", "-opengl", "-xcb-xlib", "-no-egl", "-no-icu",
		"-prefix", "../qt5-install");

	# TODO:
	# Check if WebEngine will be compiled. Qt can compile without it, but the Athena source
	# won't build without it.
	run("make", "-j${build_cores}");
	run("make", "-j${build_cores}", "install");



}

sub setup_desktop {

	if (!check_qt_install()) {
		my $qt_dir = `find "$inst_dir/vcpkg" -type d -name "qt5-install"`;
		chomp $qt_dir;

		if ( -d "$qt_dir" ) {
			info("Creating permanent qt dir... ");
			if ( -d "$inst_dir/qt5-install" ) {
				run("rm", "-rf", "$inst_dir/qt5-install");
			}
			run("cp", "-Rdp", $qt_dir, "$inst_dir/qt5-install");
		
			info_ok("done.\n");
		} else {
			fatal("Failed to find Qt dir in $inst_dir/vcpkg!");
		}
	}


	open(my $script, ">", "$inst_dir/build/run_interface") or fatal("Can't create $inst_dir/build/interface: $!");
	print $script "#!/bin/bash\n";
	print $script "export QT_DIR=$inst_dir/qt5-install\n";
	print $script "export QT_QPA_PLATFORM_PLUGIN_PATH=\$QT_DIR/plugins\n";
	print $script "export LD_LIBRARY_PATH=\$QT_DIR/lib:\$LD_LIBRARY_PATH\n";
	print $script "export PATH=\$QT_DIR/bin:\$QT_DIR/libexec:\$PATH\n";
	print $script "export QTWEBENGINEPROCESS_PATH=\$QT_DIR/libexec/QtWebEngineProcess\n";
	print $script "\"$inst_dir/build/interface/interface\" \"\$@\" 2>&1 | tee -a \"$inst_dir/build/interface.log\"\n";
	close $script;
	chmod 0755,  "$inst_dir/build/run_interface";


	open(my $dsk, ">", "$desktop/Athena.desktop") or fatal("Can't create $desktop/Athena.desktop: $!");
	print $dsk "[Desktop Entry]\n";
	print $dsk "Version=1.0\n";
	print $dsk "Name=Athena VR\n";
	print $dsk "Terminal=false\n";
	print $dsk "Type=Application\n";
	print $dsk "Exec=$inst_dir/build/run_interface\n";
	print $dsk "Icon=$inst_dir/source/interface/icon/interface.ico\n";
	print $dsk "Categories=Graphics;AudioVideo;Network\n";
	close $dsk;

	info("Marking desktop icon as trusted...\n");
	run("gio", "set", "$desktop/Athena.desktop", "metadata::trusted", "yes");

	info("Adding to menu...\n");
	run("xdg-desktop-menu", "install", "--novendor", "$desktop/Athena.desktop");

	info_ok("All done!\n");
}


sub run {
	my (@command) = @_;
	system(@command) == 0 or fatal("Failed to run " . join(' ', @command) . ": $?");
}


sub sudo_run {
	my (@command) = @_;

	important("Root privileges are needed to run the following command:\n");
	important("\t" . join(' ', @command) . "\n");
	important("Please enter your password to continue\n\n");

	run("sudo", @command);
}


sub calculate_cores {
	info("Checking how many cores to use for the build... ");

	my $mem_per_core = 1 * 1024 * 1024;

	my $core_count =  grep { /^processor/ } readfile("/proc/cpuinfo");
	my ($mem_avail) = grep { /^MemAvailable/ } readfile("/proc/meminfo");

	info_ok("$core_count cores");

	$mem_avail =~ /:\s*(\d+)/;
	$mem_avail = $1;

	
	my $cores = $core_count;
	if ( $cores >= ($mem_avail / $mem_per_core )) {
		$cores = int($mem_avail / $mem_per_core);
		$cores = 1 unless ($cores);
		warning(", memory limited to $cores\n");

	}
	info_ok("\n");

	return $cores;
}

sub get_desktop {
	my $desktop = `xdg-user-dir DESKTOP`;
	if (!$desktop) {
		$desktop = "$ENV{HOME}/Desktop";
	}

	chomp $desktop;
	return $desktop;
}


sub readfile {
	my ($file) = @_;
	open(my $fh, $file) or fatal("Can't open $file: $!");
	my @data = <$fh>;
	chomp @data;
	close $fh;
	return @data;
}

sub clone_repo {
	my ($url, $destdir, $tag, %opts) = @_;

	info("Cloning $url ($tag)... ");

	if ( ! -d "$inst_dir/$destdir/.git" ) {
		my @git_extra_args;
		info("\n");

		if ( exists $opts{git_args} ) {
			@git_extra_args = @{$opts{git_args}};
		}

		run("git", "clone", "--recursive", $url, "$inst_dir/$destdir", "-b", $tag, "--single-branch"); # "@git_extra_args);

	} else {
		info_ok("Already cloned, updating...\n");

		if ( !$opt_keep_source ) {
			chdir("$inst_dir/$destdir");
			run("git", "fetch");
			run("git", "submodule", "update", "-f", "--init");
			run("git", "clean", "-f");
			run("git", "reset", "--hard", $tag);
		}
	}
}
	

sub edit_qt_conf {
	my ($file, %values) = @_;

	info("Editing qt config file $file... ");

	open(my $rh, "<", $file) or fatal("Failed to open $file: $!");
	open(my $wh, ">", "$file.new") or fatal("Failed to create $file.new: $!");
	while(my $line = <$rh>) {
		if ( $line =~ /^(\w+)\s*=\s*(.*?)$/ && exists $values{$1} ) {
			print $wh "$1=$values{$1}\n";
			delete $values{$1};
		} else {
			print $wh $line;
		}
	}

	close $wh;
	close $rh;

	rename("$file.new", $file) or fatal("Failed to rename $file.new to $file: $!");

	if ( %values ) {
		fatal("Failed to find settings when editing $file: " . join(', ', keys %values));
	}

	info_ok("done.\n");
}


sub find_lib_dir {
	my ($lib, @paths) = @_;
	info("Trying to find where $lib is... ");
	foreach my $dir (@paths) {
		if ( -f "$dir/$lib" || -l "$dir/$lib" ) {
			info_ok("Found in $dir\n");
			return $dir;
		}
	}

	fatal("Failed! Looked in: " . join(', ', @paths));
}

sub del_dir {
	my ($dir) = @_;

	info("Ensuring $dir doesn't exist... ");
	if ( -d "$dir" ) {
		run("rm", "-rf", $dir);
		info_ok("deleted.\n");
	} else {
		info_ok("ok.\n");
	}
}


sub check_qt_install {
	info("Checking whether Qt is already installed... ");

	if ( -f "$inst_dir/qt5-install/lib/libQt5Widgets.so" || -l "$inst_dir/qt5-install/lib/libQt5Widgets.so" ) {
		info_ok("yes.\n");
		return 1;
	} else {
		info_ok("no.\n");
		return 0;
	}
}


sub help {
	my $retval = shift // 0;

	print <<HELP;

$0 [options]
Downloads, compiles and installs the Athena Project

Options:
	-d, --destdir DIR       Set the installation directory
	-h, --help              Shows this text
	-j, --cores NUM         Use NUM cores during build
	-k, --keep-source       Don't overwrite the current source tree
	-r, --repo REPO         Set the repository to REPO
	-t, --tag TAG           Set the tag to TAG
	-y, --auto              Run without asking any questions


HELP


	exit(1);
	exit($retval);
}
